---
description: AI算法推理部署专家
globs:
alwaysApply: true
---

主要目标：理解部署流程、理解需要部署的算法，基于nndeploy完成该算法的部署。

## 理解AI算法部署的全流程 
- [参考文档](docs/zh_cn/quick_start/ai_deploy.md) 

## 理解nndeploy插件机制
- python的插件机制
 - [模板代码](template/python/template.py)
 - [文档](docs/zh_cn/quick_start/plugin.md)
 - 以gfpgan为例子
  - [gfpgan](python/nndeploy/gan/gfpgan.py)
- cpp插件机制
 - [模板代码](template/python/template.py)
 - 文档(docs/zh_cn/quick_start/plugin_python.md)
 - 以Segment Anything为参考例子
  - [sam.h](plugin/include/nndeploy/segment/segment_anything/sam.h)
  - [sam.cc](plugin/source/nndeploy/segment/segment_anything/sam.cc)

## 从算法部署的角度理解算法，最终输出文档，文档的内容主要包含以下内容

### 1. 算法概述分析
- 算法的基本原理和技术背景
- 算法的应用场景和目标用户群体
- 算法的输入输出数据格式和类型
- 算法的性能指标和精度要求
- 算法的依赖库和环境要求

### 2. 用户功能需求分析
从用户使用角度，详细分析算法的主要功能：
- **核心功能**：算法的主要处理能力（如检测、分类、生成等）
- **输入处理**：支持的输入格式（图像、视频、文本等）
- **输出格式**：结果的输出形式（坐标、概率、图像等）
- **参数配置**：用户可调节的参数和配置选项

基于算法特性，详细分析并总结出该算法的多种用户功能。

### 3. 算法流程详细梳理
针对每个功能模块，深入分析处理流程：

#### 3.1 数据预处理流程
- **输入验证**：数据格式检查、尺寸验证、类型转换
- **数据标准化**：归一化、缩放、裁剪等操作
- **数据增强**：旋转、翻转、色彩调整等（如需要）
- **内存布局**：NCHW/NHWC格式转换、数据对齐

#### 3.2 模型推理流程
- **模型加载**：权重文件读取、模型结构构建
- **输入准备**：张量创建、设备分配（CPU/GPU）
- **前向推理**：模型执行、中间结果处理
- **内存管理**：显存分配、释放策略

#### 3.3 后处理流程
- **结果解析**：输出张量解释、格式转换
- **阈值过滤**：置信度筛选、NMS等操作
- **坐标变换**：相对坐标转绝对坐标、尺寸还原
- **结果封装**：标准化输出格式、元数据添加

#### 3.4 端到端服务流程

- 有些算法作为完整的功能模块对外提供服务

## 该算法基于nndeploy部署具体方案，最终输出文档，并完成代码的编写

### 1. 部署架构设计
- **整体架构图**：展示算法在nndeploy框架中的部署结构
- **节点组织方式**：说明各个功能节点的连接关系和数据流向

### 2. 文件结构规划
详细说明需要创建的文件及其作用：

#### 2.1 Python插件实现
- **主节点文件**：`python/nndeploy/[算法类别]/[算法名].py`
  - 算法主要逻辑实现
  - 继承自nndeploy.dag.Node的核心节点类
  - 输入输出数据类型定义
  - 参数配置和序列化方法

- **辅助节点文件**：`python/nndeploy/[算法类别]/[算法名]_utils.py`
  - 预处理和后处理工具函数
  - 数据格式转换工具
  - 通用计算函数

#### 2.2 C++插件实现（如需要）
- **头文件**：`plugin/include/nndeploy/[算法类别]/[算法名].h`
  - 类声明和接口定义
  - 参数结构体定义
  - 公共方法声明

- **实现文件**：`plugin/source/nndeploy/[算法类别]/[算法名].cc`
  - 具体算法逻辑实现
  - 内存管理和资源释放
  - 错误处理机制

### 3. 每个文件的具体实现内容

#### 3.1 主节点文件实现要点
- **类继承结构**：继承自nndeploy.dag.Node或nndeploy.dag.Graph
- **初始化方法**：模型加载、参数设置、资源分配
- **核心处理方法**：run()方法中的主要算法逻辑
- **输入输出处理**：数据获取、格式转换、结果输出
- **参数序列化**：配置保存和加载机制
- **错误处理**：异常捕获和状态返回

#### 3.2 其他
- **默认值设置**：合理的默认参数配置
- **模块注册**：在nndeploy框架中注册新算法节点
- **依赖管理**：第三方库和模型文件的依赖处理

## 测试

+ python测试
采用nndeploy-app --port 8000 --plugin plugin1.py plugin2.py 

+ cpp测试
采用nndeploy-app --port 8000 --plugin plugin1.so plugin2.so 
