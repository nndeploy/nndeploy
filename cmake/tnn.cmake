
include(ExternalProject)

if (ENABLE_NNDEPLOY_INFERENCE_TNN STREQUAL "OFF")
elseif (ENABLE_NNDEPLOY_INFERENCE_TNN STREQUAL "ON")
else()
  if(IS_ABSOLUTE ${ENABLE_NNDEPLOY_INFERENCE_TNN})
    # Absolute path, use directly
    set(ENABLE_NNDEPLOY_INFERENCE_TNN ${ENABLE_NNDEPLOY_INFERENCE_TNN})
    message(STATUS "Using absolute path for TNN: ${ENABLE_NNDEPLOY_INFERENCE_TNN}")
  else()
    # Relative path, relative to project root directory
    set(ENABLE_NNDEPLOY_INFERENCE_TNN ${CMAKE_SOURCE_DIR}/${ENABLE_NNDEPLOY_INFERENCE_TNN})
    message(STATUS "Using relative path for TNN: ${ENABLE_NNDEPLOY_INFERENCE_TNN}")
    # Update ENABLE_NNDEPLOY_INFERENCE_TNN to absolute path
    set(ENABLE_NNDEPLOY_INFERENCE_TNN ${ENABLE_NNDEPLOY_INFERENCE_TNN})
  endif()

  include_directories(${ENABLE_NNDEPLOY_INFERENCE_TNN}/include)
  set(LIB_PATH ${ENABLE_NNDEPLOY_INFERENCE_TNN}/${NNDEPLOY_THIRD_PARTY_LIBRARY_PATH_SUFFIX})
  set(LIBS "TNN")
  foreach(LIB ${LIBS})
    set(LIB_NAME ${NNDEPLOY_LIB_PREFIX}${LIB}${NNDEPLOY_LIB_SUFFIX})
    set(FULL_LIB_NAME ${LIB_PATH}/${LIB_NAME})
    if(IS_SYMLINK ${FULL_LIB_NAME})
      get_filename_component(REAL_LIB_NAME ${FULL_LIB_NAME} REALPATH)
      # message(STATUS "Real path of ${FULL_LIB_NAME}: ${REAL_LIB_NAME}")
      set(FULL_LIB_NAME ${REAL_LIB_NAME})
      # message(STATUS "Full lib name: ${FULL_LIB_NAME}")
    endif()
    set(NNDEPLOY_THIRD_PARTY_LIBRARY ${NNDEPLOY_THIRD_PARTY_LIBRARY} ${FULL_LIB_NAME})    
  endforeach()

  if(SYSTEM_Windows)
    set(BIN_PATH ${ENABLE_NNDEPLOY_INFERENCE_TNN}/bin)
    link_directories(${BIN_PATH})
  endif()
  install(DIRECTORY ${ENABLE_NNDEPLOY_INFERENCE_TNN} DESTINATION ${NNDEPLOY_INSTALL_THIRD_PARTY_PATH})
endif()