# GitHub Actions 工作流配置文件 - Python Linux x86_64 平台编译
# 该文件配置了在 Linux x86_64 环境中自动编译 Python 扩展包并上传到 PyPI 的 CI/CD 流水线
# 使用 cibuildwheel 构建 x86_64 架构的兼容 wheel 包

name: Py4Linux_x86  # 工作流名称，在 GitHub Actions 界面中显示

# 触发条件配置
on:
  workflow_dispatch:  # 手动触发
  pull_request:       # Pull Request 触发
  push:
    branches:
      - main          # 推送到 main 分支时触发
      - testpypi      # 推送到 testpypi 分支时触发测试上传
  release:
    types:
      - published     # 发布 Release 时触发

# 作业定义
jobs:
  build_wheels:
    name: 构建 Linux x86_64 wheels
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出源码
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # 步骤 2: 安装系统依赖
      - name: 安装系统依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config

      # 步骤 3: 使用 cibuildwheel 构建 wheels
      - name: 构建 wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          # 构建配置
          CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "*-musllinux*"
          CIBW_ARCHS_LINUX: "x86_64"
          
          # 使用 manylinux2014 镜像，它基于 CentOS 7，支持 devtoolset-11
          CIBW_MANYLINUX_X86_64_IMAGE: "quay.io/pypa/manylinux2014_x86_64:latest"
          
          CIBW_BUILD_VERBOSITY: 2
          
          # 在构建前安装系统依赖
          CIBW_BEFORE_ALL_LINUX: |
            # 更新包管理器并安装依赖
            if command -v yum > /dev/null; then
                yum update -y
                yum install -y cmake3 ninja-build pkgconfig protobuf-compiler protobuf-devel wget curl
                # 安装 devtoolset-11 (GCC 11)
                yum install -y centos-release-scl
                yum install -y devtoolset-11-gcc devtoolset-11-gcc-c++ devtoolset-11-binutils
                # 创建 cmake 符号链接
                ln -sf /usr/bin/cmake3 /usr/bin/cmake
            elif command -v apt-get > /dev/null; then
                apt-get update
                apt-get install -y cmake ninja-build pkg-config protobuf-compiler libprotobuf-dev
            fi
            
            # 安装 Rust
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source $HOME/.cargo/env
            rustup update

          CIBW_BEFORE_BUILD: |
            # 激活工具链
            if [ -f /opt/rh/devtoolset-11/enable ]; then
                source /opt/rh/devtoolset-11/enable
            fi
            source $HOME/.cargo/env

            # 安装 Python 构建依赖
            pip install pybind11 setuptools wheel twine requests pathlib cython
            
            # 安装 OpenCV 和 ONNX Runtime
            cd {project}/tool/script
            python install_opencv.py
            python install_onnxruntime.py
            
            # 构建 C++ 库
            cd {project}
            mkdir -p build
            cp cmake/config_opencv_ort_tokenizer.cmake build/config.cmake
            cd build
            
            # 设置编译器
            export CC=gcc
            export CXX=g++
            
            cmake -G Ninja .. \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
              -DCMAKE_CXX_FLAGS="-fPIC" \
              -DCMAKE_C_FLAGS="-fPIC" \
              -DPython3_EXECUTABLE=$(python -c "import sys; print(sys.executable)") \
              -DPython3_INCLUDE_DIR=$(python -c "import sysconfig; print(sysconfig.get_path('include'))") \
              -DPython3_LIBRARY=$(python -c "import sysconfig; print(sysconfig.get_config_var('LIBDIR'))") \
              -DPYTHON_EXECUTABLE=$(python -c "import sys; print(sys.executable)")
            
            ninja -j$(nproc)
            ninja install

          # 测试构建的 wheels
          CIBW_TEST_COMMAND: |
            python -c "
            import platform
            try:
                import nndeploy
                print(f'✓ 成功导入 nndeploy {nndeploy.__version__}')
                print(f'平台: {platform.platform()}')
                print(f'架构: {platform.machine()}')
                print(f'Python版本: {platform.python_version()}')
            except ImportError as e:
                print(f'✗ 导入失败: {e}')
                exit(1)
            "

          # 环境变量
          CIBW_ENVIRONMENT: |
            PATH=$PATH:$HOME/.cargo/bin
            SETUPTOOLS_EXT_SUFFIX=.so
            PYTHONPATH=$(python -c "import sys; print(':'.join(sys.path))")

        with:
          package-dir: ./python

      # 步骤 4: 验证生成的 wheels
      - name: 验证 wheels
        run: |
          ls -la wheelhouse/
          echo "=== 生成的 wheel 文件 ==="
          for wheel in wheelhouse/*.whl; do
            echo "✓ $(basename $wheel)"
            # 检查架构标签
            if [[ "$wheel" == *"x86_64"* ]]; then
              echo "  架构: x86_64"
            fi
          done

      # 步骤 5: 上传构建产物
      - uses: actions/upload-artifact@v4
        with:
          name: linux-x86_64-wheels
          path: ./wheelhouse/*.whl

  upload_testpypi:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/testpypi' || (github.event_name == 'push' && github.ref == 'refs/heads/testpypi') || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: wheels/
          
      - name: 合并 wheels
        run: |
          mkdir -p dist/
          find wheels/ -name "*.whl" -exec cp {} dist/ \;
          ls -la dist/

      - name: 验证 Token 配置
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_NNDEPLOY_TOKEN }}
        run: |
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "错误: TEST_PYPI_NNDEPLOY_TOKEN 为空!"
            exit 1
          fi
          echo "Token 配置正常"

      - name: 上传到 TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_NNDEPLOY_TOKEN }}
        run: |
          pip install twine
          twine check dist/*
          twine upload --repository testpypi dist/* --verbose --skip-existing

  upload_pypi:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: wheels/
          
      - name: 合并 wheels
        run: |
          mkdir -p dist/
          find wheels/ -name "*.whl" -exec cp {} dist/ \;
          ls -la dist/

      - name: 验证 Token 配置
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_NNDEPLOY_TOKEN }}
        run: |
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "错误: PYPI_NNDEPLOY_TOKEN 为空!"
            exit 1
          fi
          echo "Token 配置正常"

      - name: 上传到 PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_NNDEPLOY_TOKEN }}
        run: |
          pip install twine
          twine check dist/*
          twine upload dist/* --verbose