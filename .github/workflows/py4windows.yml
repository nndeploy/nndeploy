# GitHub Actions workflow configuration file - Python Windows platform compilation
# This file configures the CI/CD pipeline for automatically compiling Python extension packages and uploading to PyPI in Windows environment

name: Py4Windows  # Workflow name, displayed in GitHub Actions interface

# Trigger conditions configuration
on:
  workflow_dispatch:  # Manual trigger
  pull_request:       # Pull Request trigger
  push:
    branches:
      - main          # Trigger when pushing to main branch
      - testpypi      # Trigger test upload when pushing to testpypi branch
  release:
    types:
      - published     # Trigger when publishing Release

# Job definitions
jobs:
  build:
    strategy:
      fail-fast: false  # Don't terminate other jobs due to single job failure
      matrix:
        platform: [windows-latest]  # Running platform
        python-version: ["3.10",
                         "3.11",
                         "3.12",
                         "3.13",]

    runs-on: ${{ matrix.platform }}  # Specify runtime environment

    steps:
      # Step 1: Checkout source code
      - uses: actions/checkout@v4  # Upgrade to v4 version
        with:
          submodules: recursive    # Recursively checkout all submodules

      # Step 2: Setup Python environment
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Setup Visual Studio build environment
      - name: Setup Visual Studio build environment
        uses: microsoft/setup-msbuild@v1.1  # Setup MSBuild build tools

      # Step 4: Update Python dependencies
      - name: Update Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pybind11 setuptools wheel twine requests pathlib cython

      # Step 5: Install Rust toolchain
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc

      # Step 6: Install OpenCV and ONNXRUNTIME
      - name: Install OpenCV and ONNXRUNTIME
        run: |
          cd tool/script
          python install_opencv.py
          python install_onnxruntime.py

      # Verify third-party library installation status
      - name: Verify third-party library installation
        run: |
          echo "Verifying OpenCV installation..."
          if (Test-Path "tool/script/third_party/opencv4.8.0/lib") {
            dir tool/script/third_party/opencv4.8.0/lib
          } else {
            echo "OpenCV library directory does not exist"
            exit 1
          }
          
          echo "Verifying ONNX Runtime installation..."
          if (Test-Path "tool/script/third_party/onnxruntime1.18.0/lib") {
            dir tool/script/third_party/onnxruntime1.18.0/lib
          } else {
            echo "ONNX Runtime library directory does not exist"
            exit 1
          }
        shell: powershell

      # Step 7: Configure CMake build environment
      - name: Configure build
        run: |
          mkdir build                    # Create build directory (out-of-source build)
          cp cmake/config_windows.cmake build/config.cmake   # Copy project-specific CMake configuration file
          cd build                       # Enter build directory
          cmake -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_POLICY_VERSION_MINIMUM=3.5 ..  # Configure using Visual Studio 2022 generator

      # Step 8: Execute compilation
      - name: Compile C++ library
        run: |
          cd build                                      # Enter build directory
          cmake --build . --config Release -j 4        # Compile in parallel using Release configuration
          cmake --install . --config Release           # Install compiled files

      # Step 9: Build and install Python package
      - name: Build Python package
        run: |
          cd python
          pip install -e .
          python setup.py bdist_wheel  # Build wheel package

      # Step 10: Verify compilation results
      - name: Check compilation results
        run: |
          cd python/dist    # Enter Python package directory
          dir               # List generated wheel files
          echo "Python package compilation completed"  # Output completion information

      # Step 11: Verify Python package import
      - name: Verify Python package
        run: |
          python -c "
          import platform
          try:
              import nndeploy
              print(f'[ok] Successfully imported nndeploy {nndeploy.__version__}')
              print(f'Platform: {platform.platform()}')
              print(f'Architecture: {platform.machine()}')
              print(f'Python version: {platform.python_version()}')
          except ImportError as e:
              print(f'[failed] Import failed: {e}')
              exit(1)
          "

      # Step 12: Upload to TestPyPI (when pushing to testpypi branch)
      - name: Upload to TestPyPI
        if: github.ref == 'refs/heads/testpypi'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_NNDEPLOY_TOKEN }}
        run: |
          cd python
          twine check dist/*
          twine upload --repository-url https://test.pypi.org/legacy/ dist/*.whl

      # Step 13: Upload to official PyPI (when publishing Release)
      - name: Upload to PyPI
        if: github.event_name == 'release' && github.event.action == 'published'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_NNDEPLOY_TOKEN }}
        run: |
          cd python
          twine check dist/*
          twine upload dist/*.whl

      # Step 14: Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-python${{ matrix.python-version }}-wheel
          path: python/dist/*.whl
          retention-days: 7