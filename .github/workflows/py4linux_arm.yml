# GitHub Actions workflow configuration file - Python Linux ARM平台编译
# 此文件配置CI/CD流水线，用于在Linux ARM环境中自动编译Python扩展包并上传到PyPI
# 使用cibuildwheel构建ARM架构兼容的wheel包

name: Py4Linux_ARM  # 工作流名称，在GitHub Actions界面中显示

# 触发条件配置
on:
  workflow_dispatch:  # 手动触发
  pull_request:       # Pull Request触发
  push:
    branches:
      - main          # 推送到main分支时触发
      - testpypi      # 推送到testpypi分支时触发测试上传
  release:
    types:
      - published     # 发布Release时触发

# 任务定义
jobs:
  build_wheels:
    name: Build Linux ARM wheels
    runs-on: ubuntu-latest

    steps:
      # 步骤1: 检出源代码
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # 步骤2: 设置QEMU以支持ARM架构
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # 步骤3: 安装系统依赖
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build pkg-config

      # 步骤4: 使用cibuildwheel构建wheels
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          # 构建配置
          CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "*-musllinux*"
          CIBW_ARCHS_LINUX: "aarch64"
          
          # 使用manylinux_2_28以获得更好的兼容性
          CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux_2_28"
          
          CIBW_BUILD_VERBOSITY: 2
          
          # 构建前安装系统依赖
          CIBW_BEFORE_ALL_LINUX: |
            # 更新包管理器
            if command -v yum > /dev/null; then
                yum update -y
                yum install -y cmake ninja-build pkgconfig protobuf-compiler protobuf-devel gcc-toolset-11-gcc gcc-toolset-11-gcc-c++ libatomic-devel
                source /opt/rh/gcc-toolset-11/enable
            elif command -v apt-get > /dev/null; then
                apt-get update
                apt-get install -y cmake ninja-build pkg-config protobuf-compiler libprotobuf-dev libatomic1
            fi
            
            # 安装Rust
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source $HOME/.cargo/env
            rustup update

          CIBW_BEFORE_BUILD: |
            # 激活工具链
            if [ -f /opt/rh/gcc-toolset-11/enable ]; then
                source /opt/rh/gcc-toolset-11/enable
            fi
            source $HOME/.cargo/env
            
            # 创建libatomic符号链接（如果需要）
            if [ -f /usr/lib64/libatomic.so.1 ] && [ ! -f /usr/lib64/libatomic.so ]; then
              ln -s /usr/lib64/libatomic.so.1 /usr/lib64/libatomic.so
            fi

            # 安装Python构建依赖
            pip install pybind11 setuptools wheel twine requests pathlib cython
            
            # 安装OpenCV和ONNX Runtime
            cd {project}/tool/script
            python install_opencv.py
            python install_onnxruntime.py
            
            # 构建C++库
            cd {project}
            # 如果存在则删除现有构建目录
            # rm -rf build
            mkdir -p build
            cp cmake/config_opencv_ort_tokenizer.cmake build/config.cmake
            cd build
            
            # 设置编译器
            export CC=gcc
            export CXX=g++
            
            cmake -G Ninja .. \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
              -DCMAKE_CXX_FLAGS="-fPIC" \
              -DCMAKE_C_FLAGS="-fPIC" \
              -DPython3_EXECUTABLE=$(which python) \
              -DCMAKE_EXE_LINKER_FLAGS="-L/usr/lib64 -latomic" \
              -DCMAKE_SHARED_LINKER_FLAGS="-L/usr/lib64 -latomic"
            
            ninja -j$(nproc)
            ninja install

          # 测试构建的wheels
          # CIBW_TEST_COMMAND: |
          #   python -c "
          #   import platform
          #   try:
          #       import nndeploy
          #       print(f'✓ Successfully imported nndeploy {nndeploy.__version__}')
          #       print(f'Platform: {platform.platform()}')
          #       print(f'Architecture: {platform.machine()}')
          #   except ImportError as e:
          #       print(f'✗ Import failed: {e}')
          #       exit(1)
          #   "

          # 环境变量
          CIBW_ENVIRONMENT: |
            PATH=$PATH:$HOME/.cargo/bin
            SETUPTOOLS_EXT_SUFFIX=.so
            LDFLAGS="-L/usr/lib64 -latomic"
            CFLAGS="-I/usr/include"
            CXXFLAGS="-I/usr/include"

        with:
          package-dir: ./python

      # 步骤5: 验证生成的wheels
      - name: Verify wheels
        run: |
          ls -la wheelhouse/
          echo "=== Generated wheel files ==="
          for wheel in wheelhouse/*.whl; do
            echo "✓ $(basename $wheel)"
            # 检查架构标签
            if [[ "$wheel" == *"aarch64"* ]]; then
              echo "  Architecture: ARM64"
            fi
          done

      # 步骤6: 上传构建产物
      - uses: actions/upload-artifact@v4
        with:
          name: linux-arm-wheels
          path: ./wheelhouse/*.whl

  upload_testpypi:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/testpypi' || (github.event_name == 'push' && github.ref == 'refs/heads/testpypi') || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: wheels/
          
      - name: Merge wheels
        run: |
          mkdir -p dist/
          find wheels/ -name "*.whl" -exec cp {} dist/ \;
          ls -la dist/

      - name: Verify Token configuration
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_NNDEPLOY_TOKEN }}
        run: |
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "ERROR: TEST_PYPI_NNDEPLOY_TOKEN is empty!"
            exit 1
          fi
          echo "Token configuration looks OK"

      - name: Upload to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_NNDEPLOY_TOKEN }}
        run: |
          pip install twine
          twine check dist/*
          twine upload --repository testpypi dist/* --verbose --skip-existing

  upload_pypi:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: wheels/
          
      - name: Merge wheels
        run: |
          mkdir -p dist/
          find wheels/ -name "*.whl" -exec cp {} dist/ \;
          ls -la dist/

      - name: Verify Token configuration
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_NNDEPLOY_TOKEN }}
        run: |
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "ERROR: PYPI_NNDEPLOY_TOKEN is empty!"
            exit 1
          fi
          echo "Token configuration looks OK"

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_NNDEPLOY_TOKEN }}
        run: |
          pip install twine
          twine check dist/*
          twine upload dist/* --verbose